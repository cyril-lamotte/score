

// Create an simple arrow.
//
// $direction: top, left, right, bottom, top-left, top-right, bottom-left, bottom-right
// $color: hex, rgb or rbga
// $size: px or em
@mixin arrow($direction, $color, $size) {
  height: 0;
  width: 0;

  @if $direction == 'top' {
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-bottom: $size solid $color;
  }

  @else if $direction == 'right' {
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
    border-left: $size solid $color;
  }

  @else if $direction == 'bottom' {
    border-top: $size solid $color;
    border-right: $size solid transparent;
    border-left: $size solid transparent;
  }

  @else if $direction == 'left' {
    border-top: $size solid transparent;
    border-right: $size solid $color;
    border-bottom: $size solid transparent;
  }

  @else if $direction == 'top-left' {
    border-top: $size solid $color;
    border-right: $size solid transparent;
  }

  @else if $direction == 'top-right' {
    border-top: $size solid $color;
    border-left: $size solid transparent;
  }

  @else if $direction == 'bottom-left' {
    border-bottom: $size solid $color;
    border-right: $size solid transparent;
  }

  @else if $direction == 'bottom-right' {
    border-bottom: $size solid $color;
    border-left: $size solid transparent;
  }

}



// Display a cross with CSS only.
//
// $size  : px or em
// $color : hex
@mixin cross($size: 20px, $color: #000) {
  margin: 0;
  padding: 0;
  border: 0;
  background: none;
  position: relative;
  width: $size;
  height: $size;
  cursor: pointer;

  &:before,
  &:after {
    content: '';
    position: absolute;
    top: $size / 2;
    left: 0;
    right: 0;
    height: 1px;
    background: $color;
  }

  &:before {
    transform: rotate(45deg);
  }

  &:after {
    transform: rotate(-45deg);
  }

  span {
    display: block;
  }
}



@mixin arrow-thin($direction: 'top', $color: #000000, $bg-color: #ffffff, $size: 20px, $thickness: 0) {
  position: relative;

  $direction-inv: bottom !default;

  // Invert direction for styling.
  @if ($direction == 'bottom') {
    $direction-inv: 'top';
  }
  @elseif ($direction == 'top') {
    $direction-inv: 'bottom';
  }
  @elseif ($direction == 'right') {
    $direction-inv: 'left';
  }
  @elseif ($direction == 'left') {
    $direction-inv: 'right';
  }

  //direction-inv: $direction-inv;

  &:after,
  &:before {
    content: '';
    position: absolute;

    @if ($direction-inv == 'top') {
      #{$direction-inv}: calc(50% - #{$size / 2});
    }
    @else if ($direction-inv == 'bottom') {
      #{$direction-inv}: calc(50% - #{$size/2});
    }

    right: calc(50% - #{$size});
    border: solid transparent;
    height: 0;
    width: 0;
    pointer-events: none;
  }

  // Thin arrow.
  &:before {
    border-color: rgba($color, 0);
    border-#{$direction-inv}-color: $color;
    border-width: $size;
  }

  // Mask.
  &:after {
    border-color: rgba($bg-color, 0);
    border-#{$direction-inv}-color: $bg-color;
    border-width: $size + $thickness +1;

    @if ($direction-inv == 'top') {
      #{$direction-inv}: calc(50% - #{$size / 2 + $thickness + 2px });
    }
    @else if ($direction-inv == 'bottom') {
      #{$direction-inv}: calc(50% - #{$size} + #{$thickness} + 1px);
    }

    right: calc(50% - #{$size + $thickness + 1});
  }

}
